openapi: 3.0.0
info:
  title: User Service API
  version: 1.0.0
  description: API for user registration, authentication, and profile management.

servers:
  - url: https://example.com/
    description: User Service

paths:
  /api/register:
    post:
      summary: Register a new user
      tags: [Register]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
        '400':
          description: Email already exists

  /api/login:
    post:
      summary: Authenticate user credentials
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
        '401':
          description: Invalid credentials

  /api/refresh:
    post:
      summary: Refresh access token
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [refreshToken]
              properties:
                refreshToken:
                  type: string
      responses:
        '200':
          description: New access token issued
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
        '401':
          description: Invalid or expired refresh token

  /api/users/me:
    get:
      summary: Get current user profile
      tags: [Profile]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized

    put:
      summary: Update current user profile
      tags: [Profile]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileUpdate'
      responses:
        '200':
          description: Updated user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized

    delete:
      summary: Delete current user account
      tags: [Profile]
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Account deleted successfully
        '401':
          description: Unauthorized

  /api/users:
    get:
      summary: Get list of users (admin)
      tags: [Profile]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserProfile'
        '403':
          description: Forbidden

  /api/users/{id}:
    get:
      summary: Get public user profile
      tags: [Profile]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '404':
          description: User not found

  /api/users/{id}/block:
    post:
      summary: Block a user
      tags: [Profile]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User blocked
        '401':
          description: Unauthorized

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    UserProfile:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        name:
          type: string
        bio:
          type: string
        registeredAt:
          type: string

    UserProfileUpdate:
      type: object
      properties:
        name:
          type: string
        bio:
          type: string
